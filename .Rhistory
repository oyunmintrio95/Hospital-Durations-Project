3+5
x = c(1,2,3,4)
x
plot(x)
q()
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(ggplot2)
set.seed(1234)
price<-sample(diamonds$price,500)
library(ggplot2)
set.seed(1234)
# a sample of 500 observations from the population.
price<-sample(diamonds$price,500)
hist(price,xlab="Price",main="")
quantile(price,probs=.9)
# Creae a new function that computes percentailes
perc.fun <- function(x,i){quantile(x[i],probs=.9)}
# Create a new function that computes percentiles in manual way
# Create a new function that computes percentiles in automatic way
perc.fun <- function(x,i){quantile(x[i],probs=.9)}
perc.boot <- boot(diamonds$price,perc.fun, R=2000)
library(boot)
library(boot)
# Create a new function that computes percentiles in manual way
# Create a new function that computes percentiles in automatic way
perc.fun <- function(x,i){quantile(x[i],probs=.9)}
perc.boot <- boot(diamonds$price,perc.fun, R=2000)
perc.boot
library(boot)
# Create a new function that computes percentiles
perc.fun <- function(x,i){quantile(x[i],probs=.9)}
perc.boot <- boot(diamonds$price,perc.fun, R=2000)
perc.boot
boot.ci(perc.boo, type=c("basic","perc","bca"))
library(boot)
# Create a new function that computes percentiles
perc.fun <- function(x,i){quantile(x[i],probs=.9)}
perc.boot <- boot(diamonds$price,perc.fun, R=2000)
perc.boot
boot.ci(perc.boot, type=c("basic","perc","bca"))
library(boot)
# Create a new function that computes percentiles
perc.fun <- function(x,i){quantile(x[i],probs=.9)}
perc.boot <- boot(diamonds$price,perc.fun, R=2000)
perc.boot
boot.ci(perc.boot, type=c("basic","perc"))
library(GGally)
setwd("~/Users/oyunm/Desktop/SMU/DS-6372-Applied-Statistics/Week 3")
library(GGally)
setwd("/Users/oyunm/Desktop/SMU/DS-6372-Applied-Statistics/Week 3")
golf<-read.csv("GolfData2.csv")
#Getting fancy
lowerFn <- function(data, mapping, method = "lm", ...) {
p <- ggplot(data = data, mapping = mapping) +
geom_point(colour = "blue",size=.2) +
geom_smooth(method = loess, color = "red", ...)
p
}
ggpairs(golf[,c(2:7,11)],lower=list(continuous=lowerFn),progress = F)
# Load library
library(lmboot)
# Load library
library(lmboot)
boot.p <-paired.boot(golf$AvgWinning~golf$Age+golf$AvgDrive+golf$DriveAcc+golf$Greens+golf$AvgPutts+golf$Save, B=1000, seed=1234)
#obtain percentiles CI's for each coefficient
apply(boot.p$bootEstParam,2,quantile,probs=c(0.025,0.975))
summary(golf$AvgPutt)
summary(golf$AvgPutt)
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(rgl)
library(FNN)
Adver<-read.csv("/Users/oyunm/Desktop/SMU/DS-6372-Applied-Statistics/Week 2/AdvertisingIntroductiontoApplyingK-FoldinR.csv",header=T)
attach(Adver)
predictors<-data.frame(TV=rep(0:300,51),radio=rep(0:50,each=301))
predictors
head(Adver)
summary(Adver$TV)
summary(Adver$radio)
knitr::opts_chunk$set(echo = TRUE)
library(caret)
set.seed(1234)
x<-runif(100,-6,6.5)
trend<- 2*x^4-2*x^3-50*x^2+100*x+2
y<-trend+rnorm(100,0,100)
plot(x,y)
knitr::opts_chunk$set(echo = TRUE)
library(caret)
set.seed(1234)
x<-runif(100,-6,6.5)
trend<- 2*x^4-2*x^3-50*x^2+100*x+2
y<-trend+rnorm(100,0,100)
plot(x,y)
dummy <- dataframe(y,x)
dummy <- data.frame(y,x)
fitControl <- trainControl(method="repeatedcv", number=5, repeats=1)
set.seed(12)
glmnet.fit<-train(y~poly(x,10),
data=dummy,
method="glmnet",
trConrol=fitControl
)
glmnet.fit
lasso.fit <- train(y~poly(x,10),
data=dummy,
method='glmnet',
trControl=fitControl,
tuneGrid=epand.grid(data.frame(alpha=1,lambda=c(0.459,4.1593,41.593)))
)
lasso.fit <- train(y~poly(x,10),
data=dummy,
method='glmnet',
trControl=fitControl,
tuneGrid=expand.grid(data.frame(alpha=1,lambda=c(0.459,4.1593,41.593)))
)
knitr::opts_chunk$set(echo = TRUE)
library(rgl) ##For mac users you may need to download Xquartz before the 3d plots will run.
knitr::knit_hooks$set(webgl=hook_webgl)
library(FNN)
Adver<-read.csv("C:/Users/oyunm/Desktop/SMU/DS-6372-Applied-Statistics/Week 1/AdvertisingParametricversusNonparametricVisualizationinR.csv",header=T)
head(Adver)
simple.fit<-lm(sales~TV+radio,data=Adver)
plot3d(Adver$TV,Adver$radio,Adver$sales,xlab="TV",ylab="Radio",zlab="Sales")
surface3d(0:300,0:50,outer(0:300,0:50,function(x,y) {2.92+.04575*x+.18799*y}),alpha=.4)
simple.fit<-lm(sales~TV+radio,data=Adver)
plot3d(Adver$TV,Adver$radio,Adver$sales,xlab="TV",ylab="Radio",zlab="Sales")
surface3d(0:300,0:50,outer(0:300,0:50,function(x,y) {2.92+.04575*x+.18799*y}),alpha=.4)
simple.fit<-lm(sales~TV+radio,data=Adver)
plot3d(Adver$TV,Adver$radio,Adver$sales,xlab="TV",ylab="Radio",zlab="Sales")
surface3d(0:300,0:50,outer(0:300,0:50,function(x,y) {2.92+.04575*x+.18799*y}),alpha=.4)
predictors<-data.frame(TV=rep(0:300,51),radio=rep(0:50,each=301)) #Grid of points instead of using outer function previously
knn5<-knn.reg(Adver[,2:3],test=predictors,y=Adver$sales,k=5)
pred.surface<-matrix(knn5$pred,301,51)
plot3d(Adver$TV,Adver$radio,Adver$sales,xlab="TV",ylab="Radio",zlab="Sales")
surface3d(0:300,0:50,pred.surface,alpha=.4)
predictors<-data.frame(TV=rep(0:300,51),radio=rep(0:50,each=301)) #Grid of points instead of using outer function previously
knn5<-knn.reg(Adver[,2:3],test=predictors,y=Adver$sales,k=2)
pred.surface<-matrix(knn5$pred,301,51)
plot3d(Adver$TV,Adver$radio,Adver$sales,xlab="TV",ylab="Radio",zlab="Sales")
surface3d(0:300,0:50,pred.surface,alpha=.4)
predictors<-data.frame(TV=rep(0:300,51),radio=rep(0:50,each=301)) #Grid of points instead of using outer function previously
knn5<-knn.reg(Adver[,2:3],test=predictors,y=Adver$sales,k=30)
pred.surface<-matrix(knn5$pred,301,51)
plot3d(Adver$TV,Adver$radio,Adver$sales,xlab="TV",ylab="Radio",zlab="Sales")
surface3d(0:300,0:50,pred.surface,alpha=.4)
dummy <- data.frame(y,x)
fitControl <- trainControl(method="repeatedcv", number=5, repeats=1)
set.seed(12)
glmnet.fit<-train(y~poly(x,10),
data=dummy,
method="glmnet",
trConrol=fitControl
)
glmnet.fit
lasso.fit <- train(y~poly(x,10),
data=dummy,
method='glmnet',
trControl=fitControl,
tuneGrid=expand.grid(data.frame(alpha=1,lambda=c(0.459,4.1593,41.593)))
)
lasso.fit
opt.pen <-lasso.fit$finalModel$lambdaOpt        #penalty term
coef(lasso.fit$finalModel, opt.pen)
dummy <- data.frame(y,x)
fitControl <- trainControl(method="repeatedcv", number=5, repeats=1)
set.seed(12)
glmnet.fit<-train(y~poly(x,10),
data=dummy,
method="glmnet",
trConrol=fitControl
)
glmnet.fit
lasso.fit <- train(y~poly(x,10),
data=dummy,
method='glmnet',
trControl=fitControl,
tuneGrid=expand.grid(data.frame(alpha=1,lambda=c(0.459,4.1593,41.593)))
)
lasso.fit
opt.pen <-lasso.fit$finalModel$lambdaOpt        #penalty term
coef(lasso.fit$finalModel, opt.pen)
dummy <- data.frame(y,x)
fitControl <- trainControl(method="repeatedcv", number=5, repeats=1)
set.seed(12)
glmnet.fit<-train(y~poly(x,10),
data=dummy,
method="glmnet",
trConrol=fitControl
)
glmnet.fit
lasso.fit <- train(y~poly(x,10),
data=dummy,
method='glmnet',
trControl=fitControl,
tuneGrid=expand.grid(data.frame(alpha=1,lambda=c(0.4159,4.1593,41.593)))
)
lasso.fit
opt.pen <-lasso.fit$finalModel$lambdaOpt        #penalty term
coef(lasso.fit$finalModel, opt.pen)
dummy <- data.frame(y,x)
fitControl <- trainControl(method="repeatedcv", number=5, repeats=1)
lasso.fit <- train(y~poly(x,10),
data=dummy,
method='glmnet',
trControl=fitControl,
tuneGrid=expand.grid(data.frame(alpha=1,lambda=c(0.4159,4.1593,41.593)))
)
lasso.fit
opt.pen <-lasso.fit$finalModel$lambdaOpt        #penalty term
coef(lasso.fit$finalModel, opt.pen)
set.seed(12)
x<-runif(10000,-6,6.5)
trend <- 2*x^4-2*x^3-50*x^2+100*x+2
y<-trend+rnorm(10000,0,100)
dummy2<-data.frame(y,x)
#LASSO on biggerdata set
set.seed(12)
lasso.fit2 <- train(y~poly(x,10),
data=dummy2,
method='glmnet',
trControl=fitControl,
tuneGrid=expand.grid(data.frame(alpha=1,lambda=c(0.4159,4.1593,41.593)))
)
lasso.fit2
opt.pen <-lasso.fit2$finalModel$lambdaOpt        #penalty term
coef(lasso.fit2$finalModel, opt.pen)
library(ISLR) #For the baseball data set
Hitters2 =na.omit(Hitters)
which(rownames(Hitters2)=="-Mike Schmidt")
Hitters2<-Hitters2[-173,]
library(caret)
set.seed(1234)
fitControl<-trainControl(method="repeatedcv",number=10,repeats=1)
glmnet.fit<-train(Salary~.,
data=Hitters2,
method="glmnet",
trControl=fitControl
)
opt.pen<-glmnet.fit$finalModel$lambdaOpt
coef(glmnet.fit$finalModel,opt.pen)
glmnet.fit
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/oyunm/Desktop/SMU/DS-6372-Applied-Statistics/Project 1")
hospital <- read.csv("HospitalDurations.csv");
head(hospital)
summary(hospital)
str(hospital)
colnames(hospital)
library(ggplot2)
# Create a loop that displayes all variables boxplots.
for(2 in 12 in colnames(hospital[i])){
library(ggplot2)
# Create a loop that displayes all variables boxplots.
library(ggplot2)
# Loop through the specified column indices (2 to 12)
for (i in 2:12) {
# Ensure the column index is valid
if (i <= ncol(hospital)) {
ggplot(hospital, aes(x = "", y = hospital[[i]])) +
geom_boxplot() +
labs(y = colnames(hospital)[i], x = "") +
ggtitle(paste("Boxplot of", colnames(hospital)[i])) +
theme_minimal()
}
}
library(ggplot2)
# Create a loop that displayes all variables boxplots except for ID.
for (i in 2:12) {
# Ensure the column index is valid
if (i <= ncol(hospital)) {
p <- ggplot(hospital, aes(x = "", y = hospital[[i]])) +
geom_boxplot() +
labs(y = colnames(hospital)[i], x = "") +
ggtitle(paste("Boxplot of", colnames(hospital)[i])) +
theme_minimal()
print(p)  # Explicitly print the plot inside the loop
}
}
install.packages("naniar")
vis_miss(hospital)
library(naniar)
vis_miss(hospital)
# Create a data set that dropped categorical variables
hospital2 <- subset(-c[8,9])
# Create a data set that dropped categorical variables
hospital2 <- subset(hospial,-c[8,9])
# Create a data set that dropped categorical variables
hospital2 <- subset(hospital,-c[8,9])
# Create a data set that dropped categorical variables
hospital2 <- hospital[, -c(8, 9)]
nrows(hospital)
nrow(hospital)
summary(hospital2)
# Create a data set that dropped categorical variables and ID
hospital2 <- hospital[, -c(1,8, 9)]
summary(hospital2)
# Create a data set that dropped categorical variables and ID
hospital2 <- hospital[, -c(8, 9)]
summary(hospital2)
# Create a data set that dropped categorical variables and ID
hospital2 <- hospital[, -c(8, 9)]
summary(hospital2)
# Create a loop that displays all variables of boxplots except for ID.
for (i in 2:10) {
# Ensure the column index is valid
if (i <= ncol(hospital2)) {
p <- ggplot(hospital2, aes(x = hospital[[i]], y = hospital2$Lgth.of.Sty )) +
geom_point() +
labs(x = colnames(hospital)[i], y = "Length of Stay") +
ggtitle(paste("a scaterplo of", colnames(hospital)[i])) +
theme_minimal()
print(p)  # Explicitly print the plot inside the loop
}
}
# Create a data set that dropped categorical variables and ID
hospital2 <- hospital[, -c(8, 9)]
summary(hospital2)
# Create a loop that displays all variables of boxplots except for ID.
for (i in 2:10) {
# Ensure the column index is valid
if (i <= ncol(hospital2)) {
p <- ggplot(hospital2, aes(x = hospital2[[i]], y = hospital2$Lgth.of.Sty )) +
geom_point() +
labs(x = colnames(hospital2)[i], y = "Length of Stay") +
ggtitle(paste("a scatterplot of", colnames(hospital2)[i])) +
theme_minimal()
print(p)  # Explicitly print the plot inside the loop
}
}
library(GGally)
library(GGally)
ggpairs(hospital)
ggplot(hospital, aes(x=hospital$Med.Sc.Aff, y=hospital$Lgth.of.Sty, color=Med.Sc.Aff) + geom_boxplot())
ggplot(hospital, aes(x = as.factor(Med.Sc.Aff), y = Lgth.of.Sty, color = as.factor(Med.Sc.Aff))) +
geom_boxplot() +
labs(x = "Medical School Affiliation",
y = "Length of Stay",
title = "A Boxplot of Medical School Affiliation vs Length of Stay") +
theme_classic()
ggplot(hospital, aes(x = as.factor(Med.Sc.Aff), y = Lgth.of.Sty, color = as.factor(Med.Sc.Aff))) +
geom_boxplot(fill=as.factor(Med.Sc.Aff)) +
labs(x = "Medical School Affiliation",
y = "Length of Stay",
title = "A Boxplot of Medical School Affiliation vs Length of Stay") +
theme_classic()
ggplot(hospital, aes(x = as.factor(Med.Sc.Aff), y = Lgth.of.Sty, fill = as.factor(Med.Sc.Aff))) +
geom_boxplot() +
labs(x = "Medical School Affiliation",
y = "Length of Stay",
title = "A Boxplot of Medical School Affiliation vs Length of Stay") +
theme_classic()
table(hospital$Med.Sc.Aff)
#Region vs Lgth.of.Sty
ggplot(hospital, aes(x = as.factor(Med.Sc.Aff), y = Lgth.of.Sty, fill = as.factor(Med.Sc.Aff))) +
geom_boxplot() +
labs(x = "Medical School Affiliation",
y = "Length of Stay",
title = "A Boxplot of Medical School Affiliation vs Length of Stay") +
theme_classic()
#Med.Sc.Aff vs Lgth.of.Sty
ggplot(hospital, aes(x = as.factor(Med.Sc.Aff), y = Lgth.of.Sty, fill = as.factor(Med.Sc.Aff))) +
geom_boxplot() +
labs(x = "Medical School Affiliation",
y = "Length of Stay",
title = "A Boxplot of Medical School Affiliation vs Length of Stay") +
theme_classic()
table(hospital$Med.Sc.Aff)
#Region vs Lgth.of.Sty
ggplot(hospital, aes(x = as.factor(Region), y = Lgth.of.Sty, fill = as.factor(Region))) +
geom_boxplot() +
labs(x = "Region",
y = "Length of Stay",
title = "A Boxplot of Region vs Length of Stay") +
theme_classic()
table(hospital$Region)
# Create a data set that dropped categorical variables and ID
hospital2 <- hospital[, -c(8, 9)]
summary(hospital2)
# Create a loop that displays all variables of boxplots except for ID.
for (i in 2:10) {
# Ensure the column index is valid
if (i <= ncol(hospital2)) {
p <- ggplot(hospital2, aes(x = hospital2[[i]], y = hospital2$Lgth.of.Sty )) +
geom_point() +
labs(x = colnames(hospital2)[i], y = "Length of Stay") +
ggtitle(paste("a scatterplot of", colnames(hospital2)[i])) +
theme_minimal()
print(p)
}
}
library(GGally)
ggpairs(hospital)
library(corrplot)
library(corrplot)
cor_matrix <- cor(hospital[, sapply(hospital, is.numeric)], use="complee.obs")
library(corrplot)
cor_matrix <- cor(hospital[, sapply(hospital, is.numeric)], use="complete.obs")
# Plot the correlation matrix with colors
corrplot(cor_matrix, method = "color", type = "lower", tl.cex = 0.8, col = colorRampPalette(c("blue", "white", "red"))(200))
install.packages("ggcorrplot")
library(ggcorrplot)
# Compute correlation matrix
cor_matrix <- cor(hospital[, sapply(hospital, is.numeric)], use = "complete.obs")
# Plot using ggcorrplot
ggcorrplot(cor_matrix,
method = "square",
type = "lower",
lab = TRUE,
lab_size = 3,
colors = c("blue", "white", "red"),
title = "Correlation Matrix of Hospital Data",
ggtheme = theme_minimal())
# Create a data set that dropped categorical variables and ID
hospital2 <- hospital[, -c(8, 9)]
summary(hospital2)
# Create a loop that displays all variables of boxplots except for ID.
for (i in 2:10) {
# Ensure the column index is valid
if (i <= ncol(hospital2)) {
p <- ggplot(hospital2, aes(x = hospital2[[i]], y = hospital2$Lgth.of.Sty )) +
geom_point() +
labs(x = colnames(hospital2)[i], y = "Length of Stay") +
ggtitle(paste("a scatterplot of", colnames(hospital2)[i])) +
theme_minimal()
print(p)
}
}
# Create a data set that dropped categorical variables and ID
hospital2 <- hospital[, -c(8, 9)]
summary(hospital2)
# Create a loop that displays all variables of boxplots except for ID.
for (i in 2:10) {
# Ensure the column index is valid
if (i <= ncol(hospital2)) {
p <- ggplot(hospital2, aes(x = hospital2[[i]], y = hospital2$Lgth.of.Sty )) +
geom_point() +
labs(x = colnames(hospital2)[i], y = "Length of Stay") +
ggtitle(paste("a scatterplot of", colnames(hospital2)[i])) +
theme_minimal()
print(p)
}
}
for (i in 2:12) {
# Ensure the column index is valid
if (i <= ncol(hospital)) {
model <- lm(Lgth.of.Sty ~ hospital[[i]], data=hospital)
par(mfrow=c(2,2))
p <- plot(model)
print(p)
}
}
for (i in 2:12) {
# Ensure the column index is valid
if (i <= ncol(hospital)) {
model <- lm(Lgth.of.Sty ~ hospital[[i]], data=hospital)
par(mfrow=c(2,2))
p <- plot(model)
print(hospital[[i]])
}
}
print(colnames(hospital[[i]])
}
for (i in 2:12) {
# Ensure the column index is valid
if (i <= ncol(hospital)) {
model <- lm(Lgth.of.Sty ~ hospital[[i]], data=hospital)
par(mfrow=c(2,2))
p <- plot(model)
print(colnames(hospital[[i]])
}
for (i in 2:12) {
# Ensure the column index is valid
if (i <= ncol(hospital)) {
model <- lm(Lgth.of.Sty ~ hospital[[i]], data=hospital)
par(mfrow=c(2,2))
p <- plot(model)
}
}
colnames(hospital)
